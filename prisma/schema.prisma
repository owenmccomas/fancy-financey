generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  budgets       Budget[]
  expenses      Expense[]
  incomes       Income[]
  investments   Investment[]
  savings       Savings?
  savingsGoals  SavingsGoal[]
  sessions      Session[]
  assets        Asset[]
  bills         Bill[]
  goals         Goal[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Income {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime
  description String?
  source      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([source])
}

model Expense {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Float
  date        DateTime
  category    String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([category])
}

model Savings {
  id        Int      @id @default(autoincrement())
  amount    Float
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Budget {
  id       Int      @id @default(autoincrement())
  month    DateTime
  category String
  amount   Float
  userId   String
  user     User     @relation(fields: [userId], references: [id])

  @@index([month, category])
}

model SavingsGoal {
  id            Int      @id @default(autoincrement())
  goalName      String
  targetAmount  Float
  currentAmount Float    @default(0)
  targetDate    DateTime
  userId        String
  user          User     @relation(fields: [userId], references: [id])

  @@index([goalName])
}

model Investment {
  id             Int    @id @default(autoincrement())
  name           String
  type           String
  amountInvested Float
  currentValue   Float
  userId         String
  user           User   @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())

  @@index([type])
}

model Asset {
  id          Int      @id @default(autoincrement())
  name        String
  value       Float
  date        DateTime
  category    String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([category])
}

model Bill {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Float
  dueDate     DateTime
  category    String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([category])
}

model Goal {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  targetAmount   Float
  currentAmount  Float     @default(0)
  targetDate     DateTime
  category       String
  priority       Int       @default(1)
  status         String    @default("In Progress")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])

  @@index([category])
  @@index([status])
}